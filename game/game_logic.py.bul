- Purpose: Executes the main game loop, ensuring efficient handling of game updates, rendering processes, and player interactions for smooth gameplay, with type hints included for clarity.
- Imports:
  - import pygame
  - import configs.config
  - import game.player
  - import game.enemy
  - import game.bullet
  - import pygame.math.Vector2
- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - The display surface for rendering the game's visual elements.
        - clock: pygame.time.Clock - Manages time-related functions to ensure consistent update intervals.
        - player: game.player.Player - Instance of the Player class, representing the player's ship.
        - enemies: list[game.enemy.Enemy] - Collection of Enemy instances actively present in the game.
        - bullets: list[game.bullet.Bullet] - Collection of active Bullet instances on the screen.
        - running: bool - Boolean flag indicating whether the game loop is active.
      - Methods:
        - setup() -> None:
          - Initialize game elements like player and enemies with starting positions leveraging Vector2 for precise coordinate handling.
        - game_loop() -> None:
          - Runs while the game is active, ensuring real-time processing: 
            - Initiate handle_events() for capturing and processing user inputs.
            - Utilize update() to manage and refresh state variables of player, enemies, and bullets, ensuring dynamic interactivity.
            - Deploy check_collisions() to assess collisions with accuracy, updating respective game element states upon interaction.
            - Execute render() to redraw all elements on the screen with current states, presenting a seamless visual experience.
            - Implement clock control to achieve steady frame rate, enhancing smoothness.
        - check_collisions() -> None:
          - Execute collision logic to evaluate bullet interactions with target entities; adjust game state to reflect outcomes of collisions.
        - update() -> None:
          - Methodically update positions and states of game objects:
            - Update the player state with reference to the screen to ensure positional adjustments within screen bounds.
            - Apply updates to enemies, passing the screen as a reference for positional accuracy.
            - Adjust bullet motions with respect to the screen reference for correct trajectories.
        - render() -> None:
          - Engage rendering logic to visually present game elements:
            - Clear the display surface, ensuring a fresh frame.
            - Provide each game element with the screen reference during their drawing processes to ensure accurate rendering positions.
        - handle_events() -> None:
          - Interpret and react to user inputs such as keyboard and mouse actions, impacting game dynamics correspondingly.