- Purpose: Implements the main game loop, orchestrating efficient game updates, rendering, player interactions, and enemy behavior. Integrates toolbar updates and manages player's health and scoring through collision detection and game state changes.

- Imports: 
  - import pygame
  - from configs.config import MAX_ENEMIES
  - from game.player import Player
  - from game.enemy import Enemy
  - from game.bullet import Bullet
  - from pygame.math import Vector2
  - import random
  - import time
  - from game.toolbar import Toolbar

- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - Display surface for rendering the game visuals.
        - clock: pygame.time.Clock - Maintains consistent timing for frames.
        - player: Player - Represents the player's ship in the game.
        - enemies: list[Enemy] - Current live enemies in the game.
        - bullets: list[Bullet] - Bullets currently active on the screen.
        - running: bool - Indicates if the game loop is currently active.
        - last_enemy_spawn_time: float - Time reference for the last enemy spawn event.
        - toolbar: Toolbar - Interface component for displaying player health and score.
        - player_health: Int - Player health, starts with 5

      - Methods:
        - setup() -> None:
          - Initialize core game elements, such as the player with Vector2 starting coordinates. Set up screen settings, enemies, bullets, and toolbar initialization for displaying game stats.

        - spawn_enemies() -> None:
          - Check timing and current enemy count. Spawn new Enemy instances when permissible, reset the last spawn time, and update the enemy list.

        - game_loop() -> None:
          - Execute while running is true. Process user input, update game state, detect/handle collisions, and manage rendering. Implement enemy spawning logic and handle toolbar updates to reflect live game status.

        - check_collisions() -> None:
          - Detect and handle interactions between bullets and either enemies or the player. If a collision occurs, update the game state, such as removing enemies, and decrease player health or increase score. Trigger a game over sequence upon critical player health loss.

        - update() -> None:
          - Conduct updates for player movement, enemy movement, and bullet paths, along with ensuring on-screen validity. Adjust the toolbar with current health and score metrics.

        - draw() -> None:
          - Erase current visuals, then draw all game components, including players, enemies, bullets, and toolbar. Render them accurately on the screen.

        - handle_events() -> None:
          - Monitor and handle events using pygameâ€™s system. Key detection for actions like firing bullets from the player's location, starting upward Vector2 motion. Accommodate player inputs impacting game interactions and manage popups for restarting or exiting the game scene.