- Purpose: Implements the main game loop while managing player health and score. Handles collision detection, events, score updates, and integrates SoundManager for responsive gameplay interactions. Includes player collision animations and a game over popup.

- Imports:
  - import pygame
  - from configs.config import MAX_ENEMIES
  - from game.player import Player
  - from game.enemy import Enemy
  - from game.bullet import Bullet
  - from pygame.math import Vector2
  - import random
  - import time
  - from game.toolbar import Toolbar
  - from sounds.sound_manager import SoundManager
  - from music.background_music import BackgroundMusic

- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - Display surface for rendering the game visuals.
        - clock: pygame.time.Clock - Maintains consistent timing for frames.
        - player: Player - Represents the player's ship in the game.
        - enemies: list[Enemy] - Current live enemies in the game.
        - bullets: list[Bullet] - Bullets currently active on the screen.
        - running: bool - Indicates if the game loop is currently active.
        - last_enemy_spawn_time: float - Time reference for the last enemy spawn event.
        - toolbar: Toolbar - Interface component for displaying player health and score.
        - player_health: int - Tracks the player's current health, starting at 5.
        - score: int - Records the player's accumulated score.
        - shake_intensity: int - Level of screen shake intensity applied during player collision.
        - background_music: BackgroundMusic - Module for controlling background music playback.
        - sound_manager: SoundManager - Manages sound effects playback in-game.

      - Methods:
        - setup() -> None:
          - Initialize core game components, including the player, screen settings, enemies, bullets, and toolbar. Reset health and score to initial values. Configure initial shake intensity. Load sound effects using SoundManager and start background music.

        - spawn_enemies() -> None:
          - Spawn new enemies depending on elapsed time and current enemy count. Update enemy list with newly spawned enemies based on timing.

        - game_loop() -> None:
          - Continuously run the game loop while `running` is true. Handle inputs, update all game objects, detect collisions, refresh display, manage enemy spawning, and update score and health. Trigger sound effects through SoundManager as needed.

        - check_bullet_collisions() -> None:
          - Check active bullets for enemy collisions. On a hit, both bullet and enemy are removed, score is incremented, and play a collision sound via SoundManager.

        - check_player_collisions() -> None:
          - Verify if any enemy collides with the player. On collision, apply screen shake, remove enemy, decrease health, invoke collision sound using SoundManager, and handle game end if health depletes.

        - update() -> None:
          - Update player, enemies, and bullets positions with boundary checks. Reflect health and score changes in the toolbar. Ensure sound effects are played through SoundManager for actions occurring on-screen.

        - draw() -> None:
          - Clear the display and redraw all game entities, including player, enemies, and bullets. Use toolbar to show updated health and score.

        - handle_events() -> None:
          - Manage player input and system events. Translate player commands for actions like firing bullets and handle pause/exit/restart requests. Use SoundManager for action sounds.

        - apply_screen_shake() -> None:
          - Implement a brief shake effect on screen during collision to enhance impact feedback for the player.

        - display_game_over_popup() -> None:
          - Render a popup to signify game over, provide restart or exit options, and ensure appropriate handling of background music and game state. Use SoundManager for related sounds.