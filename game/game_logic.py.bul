- Purpose: Executes the main game loop, ensuring efficient handling of game updates, rendering processes, player interactions, and random enemy behavior for smooth gameplay, with type hints included for clarity.

- Imports:
  - import pygame
  - import configs.config
  - import game.player
  - import game.enemy
  - import game.bullet
  - import pygame.math.Vector2
  - import random
  - import time

- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - The display surface for rendering the game's visual elements.
        - clock: pygame.time.Clock - Manages time-related functions to ensure consistent update intervals.
        - player: game.player.Player - Instance of the Player class, representing the player's ship.
        - enemies: list[game.enemy.Enemy] - Collection of Enemy instances actively present in the game.
        - bullets: list[game.bullet.Bullet] - Collection of active Bullet instances on the screen.
        - running: bool - Boolean flag indicating whether the game loop is active.
        - last_enemy_spawn_time: float - Timestamp of when the last enemy was spawned to manage delay.
      - Methods:
        - setup() -> None:
          - Initialize game elements like the player with a starting position using Vector2 for precise coordinates, prepare enemies with initial setup such as setting up attributes.
        - spawn_enemies() -> None:
          - If enough delay has passed since the last spawn time and the number of enemies is beneath the maximum, generate a random number of enemies, each with eight predefined waypoints, to randomly appear and follow paths. Reset the spawn time.
        - game_loop() -> None:
          - Continues executing while the running flag is true; captures inputs, systematically manages state updates for game elements, evaluates collisions, renders updated states, maintains consistent frame rates, and calls enemy spawning method.
        - check_collisions() -> None:
          - Assess interactions between bullets and target entities, updating game states according to the results of these interactions.
        - update() -> None:
          - Sequentially update game objects' positions and states: update the player, enemies including path follow logic, and bullets, with attention to interactions within the screen bounds.
        - draw() -> None:
          - Cleanse the screen, then summon the draw method for each game object (player, enemies, bullets), giving the screen as the target surface so each renders themselves accordingly.
        - handle_events() -> None:
          - Collect events from pygame's event queue. Detect if the space bar is pressed and create a bullet instance with position linked to the playerâ€™s present position; set bullet direction via Vector2 for upward movement, append to bullets list, manage user inputs, and influence game dynamics.