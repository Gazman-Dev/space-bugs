- Purpose: Integrate sound effects and background music into the game, enhancing player actions, enemy interactions, and bullet events for an immersive audio experience. Ensure synchronization with game events and handle audio playback seamlessly.

- Imports:
  - import pygame
  - from pygame.math import Vector2
  - from configs.config import ENEMY_SPEED, SCREEN_WIDTH, SCREEN_HEIGHT
  - from utils.assets_loader import load_enemy_asset
  - from utils.sound_manager import SoundManager
  - import random

- Definitions:   
  - Classes:
    - Enemy:
      - Attributes:
        - position: Vector2 - Initial position of enemy on the screen for effective position handling.
        - speed: float - Speed for the enemy's movement, configured from ENEMY_SPEED.
        - direction: Vector2 - Current movement direction; dynamically adjusted based on the current target coordinate.
        - image: pygame.Surface - Graphical representation of the enemy, loaded from assets for visual display.
        - size: Vector2 - Size of the enemy, proportionally scaled to the screen dimensions for consistent visibility.
        - rect: pygame.Rect - Defines the rectangular area representing the enemy's current location on the screen for positioning and collision detection.
        - path: List[Vector2] - Sequence of coordinates representing the enemy's closed movement path.
        - current_target_index: int - Index of the current target coordinate from the path to achieve incremental movement.
        - sound_manager: SoundManager - Instance responsible for managing and playing sound effects related to the enemy.

      - Methods:
        - __init__(position: Vector2, sound_manager: SoundManager) -> None:
          - Initialize an enemy at a given position, set speed from configuration, generate a closed random path within boundaries with each point distanced appropriately, and set the first path point as the initial target. Load and scale the enemy image, set up rect for collision management, and assign the sound manager instance.

        - move() -> None:
          - Calculate the vector between the current position and the target path coordinate. Normalize this vector to get the movement direction if not already zero. Compute the travel vector by scaling the direction with the enemy's speed. If the travel vector is shorter than needed to reach the target, increment the position by it and use the sound manager to play the MOVE_SOUND effect. Otherwise, compute any excess using remaining travel distance beyond the target, update position, change path segment, potentially triggering a path change sound, and loop path if end is reached.

        - draw(screen: pygame.Surface) -> None:
          - Draw the enemy on the screen using its image at the current position for visual representation.

        - check_collision(obj: pygame.Rect) -> bool:
          - Determine collision with another object by checking overlap of rects. If collision detected, use the sound manager to play the EXPLOSION_SOUND effect.

        - update(screen: pygame.Surface) -> None:
          - Refresh enemy state by executing movement, cycling through paths, and updating rect positions accordingly.

        - generate_random_path() -> None:
          - Construct a closed path of up to 8 random Vector2 coordinates ensuring each is within screen limits and a predefined minimum distance from others to create a seamless movement cycle.