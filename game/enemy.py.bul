- Purpose: Defines behavior and logic for enemy characters, enabling interactions like movement, shooting, and collision detection. Ensures graphical representation and proportional sizing based on screen configurations, positioning, and updating within the game loop for consistent gameplay.

- Imports:
  - import pygame
  - from pygame.math import Vector2
  - from game.bullet import Bullet
  - from configs.config import ENEMY_SPEED, SCREEN_WIDTH, SCREEN_HEIGHT
  - from utils.assets_loader import load_enemy_asset

- Definitions:
  - Classes:
    - Enemy:
      - Attributes:
        - position: Vector2 - Initial position of enemy on the screen for effective position handling.
        - speed: float - Speed for the enemy's movement, configured from ENEMY_SPEED.
        - direction: Vector2 - Current movement direction, initialized to downward for vertical movement.
        - bullets: List[Bullet] - Collection of bullets fired by the enemy to manage active projectiles.
        - image: pygame.Surface - Graphical representation of the enemy, loaded from assets for visual display.
        - size: Vector2 - Size of the enemy, proportionally scaled to the screen dimensions for consistent visibility.
        - rect: pygame.Rect - Defines the rectangular area representing the enemy's current location on the screen for positioning and collision detection.
      - Methods:
        - __init__(position: Vector2) -> None:
          - Initialize the enemy by setting a given position, applying default speed and direction, loading and scaling an enemy image asset according to screen size, preparing an empty bullets list, and setting up the rect property to match the image dimensions at the initial position.
        - move() -> None:
          - Adjust position by adding the product of direction and speed to simulate movement across the game area, updating the rect property accordingly.
        - shoot() -> None:
          - Create a Bullet object positioned just beneath the enemy, appending the bullet to the bullets list for tracking.
        - draw(screen: pygame.Surface) -> None:
          - Display the enemy and its active bullets on the designated screen surface, ensuring their positions are adjusted relative to the screen, using the loaded and scaled image asset for depiction.
        - check_collision(obj: pygame.Rect) -> bool:
          - Verify a collision with another object by checking overlap between their rect properties.
        - update(screen: pygame.Surface) -> None:
          - Refresh the enemy's state by executing move, adjusting position, maintaining rect alignment, and handling bullets that exceed screen boundaries.