- Purpose: Implements the main game loop while directly managing player health and score. Integrates game logic to handle collision detection, events, and score updates, ensuring responsive gameplay interactions.

- Imports: 
  - import pygame
  - from configs.config import MAX_ENEMIES
  - from game.player import Player
  - from game.enemy import Enemy
  - from game.bullet import Bullet
  - from pygame.math import Vector2
  - import random
  - import time
  - from game.toolbar import Toolbar

- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - Display surface for rendering the game visuals.
        - clock: pygame.time.Clock - Maintains consistent timing for frames.
        - player: Player - Represents the player's ship in the game.
        - enemies: list[Enemy] - Current live enemies in the game.
        - bullets: list[Bullet] - Bullets currently active on the screen.
        - running: bool - Indicates if the game loop is currently active.
        - last_enemy_spawn_time: float - Time reference for the last enemy spawn event.
        - toolbar: Toolbar - Interface component for displaying player health and score.
        - player_health: int - Tracks the player's current health, starting at 5.
        - score: int - Records the player's accumulated score.
    
      - Methods:
        - setup() -> None:
          - Initialize core game components, including the player, screen settings, enemies, bullets, and toolbar. Reset health and score to initial values.

        - spawn_enemies() -> None:
          - Spawn new enemies based on elapsed time and current enemy count. Manage spawn timing and add to the enemy list.

        - game_loop() -> None:
          - Run the main game loop while `running` is true. Handle user inputs, update game elements, check for collisions, refresh screen, and manage enemy spawns, while regulating score and health.

        - check_bullet_collisions() -> None:
          - Traverse through active bullets and check them against enemies for collisions. Upon collision, remove both the bullet and enemy from the game and increment the player's score.

        - check_player_collisions() -> None:
          - Loop through enemies to ensure none collide with the player. On a collision occurrence, remove the enemy, decrement the player's health, and assess if the game should end if the player's health depletes.

        - update() -> None:
          - Update positions of player, enemies, and bullets with boundary checks. Reflect changes in health and score with corresponding toolbar updates.

        - draw() -> None:
          - Clear and refresh the game display, drawing all active game elements like the player, enemies, and bullets. Display current health and score via the toolbar.

        - handle_events() -> None:
          - Process user inputs and system events. Interpret controls for player actions like bullet firing, and handle game pause, exit, or restart commands.