- Purpose: Implements the main game loop while directly managing player health and score. Integrates game logic to handle collision detection, events, and score updates without external dependencies on player or toolbar files.

- Imports: 
  - import pygame
  - from configs.config import MAX_ENEMIES
  - from game.player import Player
  - from game.enemy import Enemy
  - from game.bullet import Bullet
  - from pygame.math import Vector2
  - import random
  - import time
  - from game.toolbar import Toolbar

- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - Display surface for rendering the game visuals.
        - clock: pygame.time.Clock - Maintains consistent timing for frames.
        - player: Player - Represents the player's ship in the game.
        - enemies: list[Enemy] - Current live enemies in the game.
        - bullets: list[Bullet] - Bullets currently active on the screen.
        - running: bool - Indicates if the game loop is currently active.
        - last_enemy_spawn_time: float - Time reference for the last enemy spawn event.
        - toolbar: Toolbar - Interface component for displaying player health and score.
        - player_health: int - Tracks the player's current health, starting at 5.
        - score: int - Records the player's accumulated score.
    
      - Methods:
        - setup() -> None:
          - Initialize core game components, such as the player, screen settings, enemies, bullets, and toolbar. Reset health and score to start values.

        - spawn_enemies() -> None:
          - Evaluate spawn conditions based on time and existing enemies. Populate the enemy list with new instances and adjust spawn timings.

        - game_loop() -> None:
          - Continuously run provided `running` is true. Process user input, update states, check collisions, and refresh visuals. Implement enemy spawning and directly manage score and health changes.

        - check_collisions() -> None:
          - Evaluate collisions between bullets and either enemies or the player. In case of a bullet-enemy collision, eliminate the enemy and increase score. For player-hit scenarios, reduce health and check for game over.

        - update() -> None:
          - Execute movement updates for player, enemies, and bullets, ensuring boundaries are respected. Directly update health and score within the game logic and reflect these in the toolbar.

        - draw() -> None:
          - Clear the current display, then accurately render all entities like the player, enemies, bullets, and display current health and score on the toolbar.

        - handle_events() -> None:
          - Listen and respond to user inputs and pygame events, including player controls like firing bullets. Interpret specific key actions for in-game commands and deploy necessary logic for game exits or restarts.