- Purpose: Implements the main game loop while directly managing player health and score. Integrates game logic to handle collision detection, events, score updates, and game sound components, ensuring responsive gameplay interactions. Enhancements include player collision animations and a game over popup.

- Imports:
  - import pygame
  - from configs.config import MAX_ENEMIES
  - from game.player import Player
  - from game.enemy import Enemy
  - from game.bullet import Bullet
  - from pygame.math import Vector2
  - import random
  - import time
  - from game.toolbar import Toolbar
  - from sounds.sound_effects import SoundEffects
  - from music.background_music import BackgroundMusic

- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - Display surface for rendering the game visuals.
        - clock: pygame.time.Clock - Maintains consistent timing for frames.
        - player: Player - Represents the player's ship in the game.
        - enemies: list[Enemy] - Current live enemies in the game.
        - bullets: list[Bullet] - Bullets currently active on the screen.
        - running: bool - Indicates if the game loop is currently active.
        - last_enemy_spawn_time: float - Time reference for the last enemy spawn event.
        - toolbar: Toolbar - Interface component for displaying player health and score.
        - player_health: int - Tracks the player's current health, starting at 5.
        - score: int - Records the player's accumulated score.
        - shake_intensity: int - Level of screen shake intensity applied during player collision.
        - sound_effects: SoundEffects - Module for managing and playing sound effects.
        - background_music: BackgroundMusic - Module for controlling background music playback.
    
      - Methods:
        - setup() -> None:
          - Initialize core game components, including the player, screen settings, enemies, bullets, and toolbar. Reset health and score to initial values. Configure initial shake intensity. Load sound effects and initialize background music playback.

        - spawn_enemies() -> None:
          - Spawn new enemies based on elapsed time and current enemy count. Manage spawn timing and add to the enemy list.

        - game_loop() -> None:
          - Run the main game loop while `running` is true. Handle user inputs, update game elements, check for collisions, refresh screen, and manage enemy spawns. Regulate score and health, handle background music, and prompt sound effects for actions.

        - check_bullet_collisions() -> None:
          - Traverse through active bullets and check them against enemies for collisions. Upon collision, remove both the bullet and enemy from the game, play relevant sound effect, and increment the player's score.

        - check_player_collisions() -> None:
          - Loop through enemies to ensure none collide with the player. On a collision occurrence, invoke screen shake effect, remove the enemy, decrement the player's health, play collision sound, and assess if the game should end if the player's health depletes.

        - update() -> None:
          - Update positions of player, enemies, and bullets with boundary checks. Reflect changes in health and score with corresponding toolbar updates. Ensure appropriate sound effects for on-screen actions.

        - draw() -> None:
          - Clear and refresh the game display, drawing all active game elements like the player, enemies, and bullets. Display current health and score via the toolbar.

        - handle_events() -> None:
          - Process user inputs and system events. Interpret controls for player actions like bullet firing, and handle game pause, exit, or restart commands. Trigger corresponding sound effects for user actions.

        - apply_screen_shake() -> None:
          - Implement a shake effect by briefly adjusting the screen position when a collision is detected, enhancing the player feedback on impact.

        - display_game_over_popup() -> None:
          - Render a game over popup on the screen, offering options to either restart the game or exit, while ensuring the game state reflects the player's end and manage the background music appropriately.