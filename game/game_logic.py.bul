- Purpose: Executes the main game loop, ensuring efficient handling of game updates, rendering processes, and player interactions for smooth gameplay, with type hints included for clarity.

- Imports:
  - import pygame
  - import configs.config
  - import game.player
  - import game.enemy
  - import game.bullet
  - import pygame.math.Vector2

- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - The display surface for rendering the game's visual elements.
        - clock: pygame.time.Clock - Manages time-related functions to ensure consistent update intervals.
        - player: game.player.Player - Instance of the Player class, representing the player's ship.
        - enemies: list[game.enemy.Enemy] - Collection of Enemy instances actively present in the game.
        - bullets: list[game.bullet.Bullet] - Collection of active Bullet instances on the screen.
        - running: bool - Boolean flag indicating whether the game loop is active.
      - Methods:
        - setup() -> None:
          - Initialize game elements like player and enemies with starting positions utilizing Vector2 for precise coordinate handling.
        - game_loop() -> None:
          - Runs while the game is active, ensuring real-time processing by capturing user inputs, updating state variables of game elements, assessing collisions, rendering updated states, and maintaining a consistent frame rate.
        - check_collisions() -> None:
          - Evaluate bullet interactions with target entities, altering game state as necessary to reflect the outcomes of these interactions.
        - update() -> None:
          - Systematically update the positions and states of game objects; update the player, enemies, and bullets while considering interactions within screen boundaries.
        - draw() -> None:
          - Clear the display, then call the draw method for all game elements (player, enemies, bullets), providing the screen as the reference surface for each to render themselves appropriately.
        - handle_events() -> None:
          - Capture events from pygame's event queue. If the space key is pressed, create a new bullet instance with position set to the playerâ€™s current position, direction set using Vector2 for upward movement, and add it to the bullets list. Handle other user-generated inputs to influence game dynamics, managing interactions from keyboards and other input mediums.