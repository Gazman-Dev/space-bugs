- Purpose: Implements the main game loop, manages player health, and score, handles collisions and events, updates the score, and integrates the SoundManager for responsive gameplay interactions. Includes player collision animations and a game over popup.

- Imports:
  - import pygame
  - from configs.config import MAX_ENEMIES
  - from game.player import Player
  - from game.enemy import Enemy
  - from game.bullet import Bullet
  - from pygame.math import Vector2
  - import random
  - import time
  - from game.toolbar import Toolbar
  - from sounds.sound_manager import SoundManager
  - from game.popup import GameOverPopup

- Definitions:
  - Attributes: 
    - BGM_SOUND: str - Background music sound constant.
    - EXPLOSION_SOUND: str - Explosion sound effect constant.
    - SHOOT_SOUND: str - Shooting sound effect constant.

  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - Display surface for rendering the game visuals.
        - clock: pygame.time.Clock - Maintains consistent timing for frames.
        - player: Player - Represents the player's ship in the game.
        - enemies: list[Enemy] - Current live enemies in the game.
        - bullets: list[Bullet] - Bullets currently active on the screen.
        - running: bool - Indicates if the game loop is currently active.
        - last_enemy_spawn_time: float - Time reference for the last enemy spawn event.
        - toolbar: Toolbar - Interface component for displaying player health and score.
        - player_health: int - Tracks the player's current health, starting at 5.
        - score: int - Records the player's accumulated score.
        - shake_intensity: int - Level of screen shake intensity applied during player collision.
        - sound_manager: SoundManager - Instance for managing and playing sound effects.
        - game_over_popup: GameOverPopup - Component for displaying game over popup.

      - Methods:
        - setup() -> None:
          - Initialize core game components, such as the player, screen, enemies, bullets, toolbar, and game over popup. Reset health and score. Set initial shake intensity. Start background music using `BGM_SOUND`.

        - spawn_enemies() -> None:
          - Spawn new enemies based on elapsed time and current enemy count. Add new enemies to the enemy list as per timing rules.

        - game_loop() -> None:
          - Maintain the game loop while `running` is true. Handle inputs, update game objects, detect collisions, refresh display, manage enemies, update score, and player health. Use SoundManager to trigger sounds. Display game over popup when health is zero, handling keypress for exit or reset.

        - check_bullet_collisions() -> None:
          - Detect bullet collisions with enemies. On collision, remove bullet and enemy, update score, and play `EXPLOSION_SOUND`.

        - check_player_collisions() -> None:
          - Detect enemy collisions with the player. On collision, apply screen shake, remove the enemy, decrease health, play collision sound using `EXPLOSION_SOUND`, and handle game end if health reaches zero.

        - update() -> None:
          - Adjust player, enemies, and bullets positions with boundary checks. Update toolbar with new health and score. Use SoundManager for appropriate sound effects based on actions on-screen.

        - draw() -> None:
          - Clear and redraw all game entities, such as the player, enemies, and bullets. Use the toolbar to show updated health and score. Render game over popup when necessary.

        - handle_events() -> None:
          - Process player input and system events. Translate commands for player actions, like shooting bullets with `SHOOT_SOUND`. Manage pause, exit, and restart commands.

        - apply_screen_shake() -> None:
          - Apply a screen shake effect briefly during player collision to enhance feedback and immersion.

        - display_game_over_popup() -> None:
          - Render and control a game over popup to signal the end of the game, allowing restart or exit options. Ensure proper handling of sounds and game state transitions using SoundManager.