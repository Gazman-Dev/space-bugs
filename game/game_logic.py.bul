- Purpose: Executes the main game loop, ensuring efficient handling of game updates, rendering processes, player interactions, and random enemy behavior for smooth gameplay, with type hints included for clarity.

- Imports:
  - import pygame
  - from configs.config import MAX_ENEMIES
  - from game.player import Player
  - from game.enemy import Enemy
  - from game.bullet import Bullet
  - from pygame.math import Vector2
  - import random
  - import time

- Definitions:
  - Classes:
    - Game:
      - Attributes:
        - screen: pygame.Surface - The display surface for rendering the game's visual elements.
        - clock: pygame.time.Clock - Manages time-related functions to ensure consistent update intervals.
        - player: Player - Instance of the Player class, representing the player's ship.
        - enemies: list[Enemy] - Collection of Enemy instances actively present in the game.
        - bullets: list[Bullet] - Collection of active Bullet instances on the screen.
        - running: bool - Boolean flag indicating whether the game loop is active.
        - last_enemy_spawn_time: float - Timestamp of when the last enemy was spawned to manage delay.

      - Methods:
        - setup() -> None:
          - Initialize game elements like the player with a starting position using Vector2 for precise coordinates, prepare game settings, and initialize required lists for enemies and bullets.
        
        - spawn_enemies() -> None:
          - Verify if sufficient time has elapsed since the last enemy spawn and the currently active count of enemies is less than the predefined maximum. Create and append new `Enemy` instances to the enemies list. Reset the enemy spawn timer.
        
        - game_loop() -> None:
          - Run continuously while the running flag is true. Capture user inputs, update all game component states, detect and process collisions, render updated graphics to the screen, and keep the game running at a consistent frame rate, invoking enemy spawn method as dictated by game timing.
        
        - check_collisions() -> None:
          - Check for interactions between bullets and enemy or player objects, updating the game state based on detection results and executing relevant events (e.g., removing an enemy or reducing player health) when collisions occur.
        
        - update() -> None:
          - Sequentially update each game element: player movement, enemy movements according to their logic, and bullet trajectories; ensure all remain within screen bounds and handle interactions accordingly.
        
        - draw() -> None:
          - Clear the current screen, and invoke the draw method for all game objects (player, enemies, bullets), passing the screen as the draw target to ensure accurate rendering.
        
        - handle_events() -> None:
          - Poll events using pygameâ€™s event system. Detect key presses such as the space bar, instantiate a bullet at the player's position with its direction set for upward movement using Vector2, append to the bullets list, and manage other user inputs to affect game dynamics.