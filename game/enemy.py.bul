- Purpose: Implement enemy behavior, including movement, shooting, collision detection, and path-following capabilities, to allow dynamic interactions within the game by utilizing a randomly generated path consisting of multiple coordinates. Ensure that paths comply with screen boundaries and utilize pygame's Vector2 for precise movement calculations.

- Imports:
  - import pygame
  - from pygame.math import Vector2
  - from game.bullet import Bullet
  - from configs.config import ENEMY_SPEED, SCREEN_WIDTH, SCREEN_HEIGHT
  - from utils.assets_loader import load_enemy_asset
  - import random

- Definitions:
  - Classes:
    - Enemy:
      - Attributes:
        - position: Vector2 - Initial position of enemy on the screen for effective position handling.
        - speed: float - Speed for the enemy's movement, configured from ENEMY_SPEED.
        - direction: Vector2 - Current movement direction; dynamically adjusted based on the current target coordinate.
        - bullets: List[Bullet] - Collection of bullets fired by the enemy to manage active projectiles.
        - image: pygame.Surface - Graphical representation of the enemy, loaded from assets for visual display.
        - size: Vector2 - Size of the enemy, proportionally scaled to the screen dimensions for consistent visibility.
        - rect: pygame.Rect - Defines the rectangular area representing the enemy's current location on the screen for positioning and collision detection.
        - path: List[Vector2] - Sequence of coordinates representing the enemy's movement path.
        - current_target_index: int - Index of the current target coordinate from the path to achieve incremental movement.
      - Methods:
        - __init__(position: Vector2) -> None:
          - Initialize the enemy by setting a given position, applying default speed, generating a random movement path, designating the first coordinate as the initial target, loading and scaling the image asset, preparing an empty bullets list, and setting up the rect for collision detection.
        - move() -> None:
          - Update the enemy's position by moving towards the current target coordinate in the path. Adjust direction based on the target's location, recalibrate rect after movement, and cycle to the next target when the current one is reached.
        - shoot() -> None:
          - Create and append a Bullet object beneath the enemy, adding it to the bullets list for tracking purposes.
        - draw(screen: pygame.Surface) -> None:
          - Render the enemy and its bullets on the specified screen surface with accurately adjusted positions, utilizing the loaded and scaled image asset to ensure visual fidelity.
        - check_collision(obj: pygame.Rect) -> bool:
          - Assert a collision occurrence by determining overlap between the enemy's and another object's rect properties.
        - update(screen: pygame.Surface) -> None:
          - Refresh the enemy state through executing movement, maintaining proper position and rect alignment, managing off-screen bullets, and proceeding to the next path target as needed.
        - generate_random_path() -> None:
          - Create a path consisting of a series of random coordinates, ensuring compliance with screen boundaries to foster controlled enemy movement.